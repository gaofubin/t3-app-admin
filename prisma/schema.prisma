// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id            String     @id @default(cuid())
    username      String     @unique
    password      String
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    roles         UserRole[]
}

model Role {
    id          String           @id @default(cuid())
    name        String           @unique
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    users       UserRole[]
    permissions RolePermission[]
}

model Permission {
    id        String           @id @default(cuid())
    code      String           @unique // e.g. system:user:create
    name      String
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    roles     RolePermission[]
    menus     MenuPermission[]
}

model Menu {
    id          String           @id @default(cuid())
    name        String
    type        Int // 1=directory，2=page，3=button
    url         String? // type 2 has
    icon        String? // type 1 has
    sort        Int?
    parentId    String?
    parent      Menu?            @relation("SubMenus", fields: [parentId], references: [id])
    children    Menu[]           @relation("SubMenus")
    permissions MenuPermission[] // for type 3
}

model UserRole {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId String

    @@unique([userId, roleId])
}

model RolePermission {
    id           String     @id @default(cuid())
    role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId       String
    permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId String

    @@unique([roleId, permissionId])
}

model MenuPermission {
    id           String     @id @default(cuid())
    menu         Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
    menuId       String
    permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId String

    @@unique([menuId, permissionId])
}
